import os, json
import torch as ch
from robustness import datasets
from robustness.tools.label_maps import CLASS_DICT
from robustness.tools.folder import default_loader, IMG_EXTENSIONS, DatasetFolder

def load_ObjectNet(data_dir, workers=10, 
                   batch_size=128, data_aug=False, 
                   shuffle_train=False, 
                   shuffle_val=False):
    
    dataset = datasets.ImageNet(os.path.join(data_dir, 'images'))
    dataset.custom_class = OImageFolder
    _, loader = dataset.make_loaders(workers, 
                                 batch_size, 
                                 only_val=True,
                                 data_aug=data_aug, 
                                 shuffle_train=shuffle_train, 
                                 shuffle_val=shuffle_val)
    label_map = {v: k for k, v in loader.dataset.class_to_idx.items()}
    return dataset, loader, label_map

class OImageFolder(DatasetFolder):
    def __init__(self, root, transform=None, target_transform=None,
                 loader=default_loader, label_mapping=None, train=False,
                 download=False):
        super(OImageFolder, self).__init__(root, loader, IMG_EXTENSIONS,
                                          transform=transform,
                                          target_transform=target_transform,
                                          label_mapping=label_mapping)
        self.imgs = self.samples

def map_objnet_names(vo):
    EXCEP = {'bath_towel': 'bathrobe', 
        "butcher's_knife": "butchers_knife", 
         "coffee/french_press": "coffee_french_press",
         "dishrag_or_hand_towel": "hand_towel_or_rag",
         "drying_rack_for_plates": "drying_rack_for_dishes"}
    if ")" in vo:
        v = vo.replace("(", "").replace(")", "")
    else:
        v = vo
    v = v.replace("/ ","").replace("''","").replace(" ", "_").lower()
    if v in EXCEP: return EXCEP[v]
    return v

def map_ImageNetToObjectNet(data_dir, label_map):
    with open(os.path.join(data_dir, "mappings", 
                       "objectnet_to_imagenet_1k.json")) as f:
        info_map = json.load(f)
    label_map_r = {v: k for k, v in label_map.items()}
    in_label_map = CLASS_DICT['ImageNet']
    
    obj_to_in_map, obj_folder_to_label = {}, {}
    for k, vo in info_map.items():
        if ';' in vo:
            v = vo.split(";")[0]
        else:
            v = vo
        ks = [kk for kk, vv in label_map.items() if vv == map_objnet_names(k)]
        km = [kk for kk, vv in in_label_map.items() if vv == v]
        obj_folder_to_label[k] = label_map_r[map_objnet_names(k)]
        assert len(km) == 1
        obj_to_in_map[ks[0]] = km[0]
    return obj_to_in_map, obj_folder_to_label

LABEL_TO_IND = {'Alarm clock': 1,
 'Backpack': 2,
 'Banana': 4,
 'Bandaid': 5,
 'Basket': 8,
 'Bath towel': 9,
 'Beer bottle': 12,
 'Bench': 15,
 'Bicycle': 16,
 'Binder (closed)': 19,
 'Bottle cap': 28,
 'Bread loaf': 34,
 'Broom': 37,
 'Bucket': 38,
 'Butcherâ€™s knife': 39,
 'Can opener': 43,
 'Candle': 44,
 'Cellphone': 47,
 'Chair': 51,
 'Clothes hamper': 56,
 'French press': 60,
 'Combination lock': 66,
 'Computer mouse': 67,
 'Desk lamp': 73,
 'Dishrag or hand towel': 116,
 'Doormat': 78,
 'Dress shoe (men)': 83,
 'Drill': 85,
 'Drinking Cup': 86,
 'Drying rack for plates': 89,
 'Envelope': 96,
 'Fan': 100,
 'Frying pan': 107,
 'Dress': 80,
 'Hair dryer': 111,
 'Hammer': 114,
 'Helmet': 120,
 'Iron': 124,
 'Jeans': 128,
 'Keyboard': 131,
 'Ladle': 132,
 'Lampshade': 133,
 'Laptop (open)': 135,
 'Lemon': 138,
 'Letter opener': 139,
 'Lighter': 142,
 'Lipstick': 143,
 'Match': 149,
 'Measuring cup': 150,
 'Microwave': 151,
 'Mixing / Salad Bowl': 153,
 'Monitor': 154,
 'Mug': 157,
 'Nail': 160,
 'Necklace': 164,
 'Orange': 171,
 'Padlock': 173,
 'Paintbrush': 175,
 'Paper towel': 179,
 'Pen': 182,
 'Pill bottle': 188,
 'Pillow': 190,
 'Pitcher': 191,
 'Plastic bag': 193,
 'Plate': 196,
 'Plunger': 199,
 'Pop can': 200,
 'Portable heater': 201,
 'Printer': 205,
 'Remote control': 210,
 'Ruler': 216,
 'Running shoe': 217,
 'Safety pin': 218,
 'Salt shaker': 219,
 'Sandal': 220,
 'Screw': 223,
 'Shovel': 229,
 'Skirt': 231,
 'Sleeping bag': 232,
 'Soap dispenser': 235,
 'Sock': 236,
 'Soup Bowl': 237,
 'Spatula': 238,
 'Speaker': 239,
 'Still Camera': 248,
 'Strainer': 250,
 'Stuffed animal': 251,
 'Suit jacket': 253,
 'Sunglasses': 255,
 'Sweater': 256,
 'Swimming trunks': 257,
 'T-shirt': 258,
 'TV': 287,
 'Teapot': 267,
 'Tennis racket': 268,
 'Tie': 272,
 'Toaster': 274,
 'Toilet paper roll': 275,
 'Trash bin': 283,
 'Tray': 285,
 'Umbrella': 289,
 'Vacuum cleaner': 292,
 'Vase': 293,
 'Wallet': 297,
 'Watch': 298,
 'Water bottle': 299,
 'Weight (exercise)': 302,
 'Weight scale': 303,
 'Wheel': 304,
 'Whistle': 306,
 'Wine bottle': 307,
 'Winter glove': 309,
 'Wok': 310}

OBJN_TO_IN_MAP = {1: 409,
 2: 414,
 4: 954,
 5: 419,
 8: 790,
 9: 434,
 12: 440,
 15: 703,
 16: 671,
 19: 446,
 28: 455,
 34: 930,
 37: 462,
 38: 463,
 39: 499,
 43: 473,
 44: 470,
 47: 487,
 51: 423,
 56: 588,
 60: 550,
 66: 507,
 67: 673,
 73: 846,
 116: 533,
 78: 539,
 83: 630,
 85: 740,
 86: 968,
 89: 729,
 96: 549,
 100: 545,
 107: 567,
 80: 578,
 111: 589,
 114: 587,
 120: 560,
 124: 606,
 128: 608,
 131: 508,
 132: 618,
 133: 619,
 135: 620,
 138: 951,
 139: 623,
 142: 626,
 143: 629,
 149: 644,
 150: 647,
 151: 651,
 153: 659,
 154: 664,
 157: 504,
 160: 677,
 164: 679,
 171: 950,
 173: 695,
 175: 696,
 179: 700,
 182: 418,
 188: 720,
 190: 721,
 191: 725,
 193: 728,
 196: 923,
 199: 731,
 200: 737,
 201: 811,
 205: 742,
 210: 761,
 216: 769,
 217: 770,
 218: 772,
 219: 773,
 220: 774,
 223: 783,
 229: 792,
 231: 601,
 232: 797,
 235: 804,
 236: 806,
 237: 809,
 238: 813,
 239: 632,
 248: 732,
 250: 828,
 251: 850,
 253: 834,
 255: 837,
 256: 841,
 257: 842,
 258: 610,
 287: 851,
 267: 849,
 268: 752,
 272: 457,
 274: 859,
 275: 999,
 283: 412,
 285: 868,
 289: 879,
 292: 882,
 293: 883,
 297: 893,
 298: 531,
 299: 898,
 302: 543,
 303: 778,
 304: 479,
 306: 902,
 307: 907,
 309: 658,
 310: 909}